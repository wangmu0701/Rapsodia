! This file was generated by Rapsodia (see www.mcs.anl.gov/Rapsodia)
r%v=a%v ** b
if (a%v == 0.0) then
  if (real(b) <= 0.0) then
    r%d1_1=makeFPE(0.0, 0.0)
    r%d1_2=makeFPE(0.0, 0.0)
    r%d1_3=makeFPE(0.0, 0.0)
    r%d1_4=makeFPE(0.0, 0.0)
    r%d1_5=makeFPE(0.0, 0.0)
    r%d1_6=makeFPE(0.0, 0.0)
    r%d1_7=makeFPE(0.0, 0.0)
    r%d1_8=makeFPE(0.0, 0.0)
    r%d1_9=makeFPE(0.0, 0.0)
    r%d1_10=makeFPE(0.0, 0.0)
    r%d2_1=makeFPE(0.0, 0.0)
    r%d2_2=makeFPE(0.0, 0.0)
    r%d2_3=makeFPE(0.0, 0.0)
    r%d2_4=makeFPE(0.0, 0.0)
    r%d2_5=makeFPE(0.0, 0.0)
    r%d2_6=makeFPE(0.0, 0.0)
    r%d2_7=makeFPE(0.0, 0.0)
    r%d2_8=makeFPE(0.0, 0.0)
    r%d2_9=makeFPE(0.0, 0.0)
    r%d2_10=makeFPE(0.0, 0.0)
    r%d3_1=makeFPE(0.0, 0.0)
    r%d3_2=makeFPE(0.0, 0.0)
    r%d3_3=makeFPE(0.0, 0.0)
    r%d3_4=makeFPE(0.0, 0.0)
    r%d3_5=makeFPE(0.0, 0.0)
    r%d3_6=makeFPE(0.0, 0.0)
    r%d3_7=makeFPE(0.0, 0.0)
    r%d3_8=makeFPE(0.0, 0.0)
    r%d3_9=makeFPE(0.0, 0.0)
    r%d3_10=makeFPE(0.0, 0.0)
  else
    if ((b - floor(real(b))) /= 0) then
      expDiff=b - 1
      if (expDiff > 1) then
        r%d1_1=0.0
        r%d2_1=0.0
        r%d3_1=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_1=makeFPE(1.0, 0.0)
        r%d2_1=makeFPE(1.0, 0.0)
        r%d3_1=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_1=makeFPE(0.0, 0.0)
        r%d2_1=makeFPE(0.0, 0.0)
        r%d3_1=makeFPE(0.0, 0.0)
      end if
      expDiff=b - 2
      if (expDiff > 1) then
        r%d1_2=0.0
        r%d2_2=0.0
        r%d3_2=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_2=makeFPE(1.0, 0.0)
        r%d2_2=makeFPE(1.0, 0.0)
        r%d3_2=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_2=makeFPE(0.0, 0.0)
        r%d2_2=makeFPE(0.0, 0.0)
        r%d3_2=makeFPE(0.0, 0.0)
      end if
      expDiff=b - 3
      if (expDiff > 1) then
        r%d1_3=0.0
        r%d2_3=0.0
        r%d3_3=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_3=makeFPE(1.0, 0.0)
        r%d2_3=makeFPE(1.0, 0.0)
        r%d3_3=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_3=makeFPE(0.0, 0.0)
        r%d2_3=makeFPE(0.0, 0.0)
        r%d3_3=makeFPE(0.0, 0.0)
      end if
      expDiff=b - 4
      if (expDiff > 1) then
        r%d1_4=0.0
        r%d2_4=0.0
        r%d3_4=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_4=makeFPE(1.0, 0.0)
        r%d2_4=makeFPE(1.0, 0.0)
        r%d3_4=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_4=makeFPE(0.0, 0.0)
        r%d2_4=makeFPE(0.0, 0.0)
        r%d3_4=makeFPE(0.0, 0.0)
      end if
      expDiff=b - 5
      if (expDiff > 1) then
        r%d1_5=0.0
        r%d2_5=0.0
        r%d3_5=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_5=makeFPE(1.0, 0.0)
        r%d2_5=makeFPE(1.0, 0.0)
        r%d3_5=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_5=makeFPE(0.0, 0.0)
        r%d2_5=makeFPE(0.0, 0.0)
        r%d3_5=makeFPE(0.0, 0.0)
      end if
      expDiff=b - 6
      if (expDiff > 1) then
        r%d1_6=0.0
        r%d2_6=0.0
        r%d3_6=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_6=makeFPE(1.0, 0.0)
        r%d2_6=makeFPE(1.0, 0.0)
        r%d3_6=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_6=makeFPE(0.0, 0.0)
        r%d2_6=makeFPE(0.0, 0.0)
        r%d3_6=makeFPE(0.0, 0.0)
      end if
      expDiff=b - 7
      if (expDiff > 1) then
        r%d1_7=0.0
        r%d2_7=0.0
        r%d3_7=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_7=makeFPE(1.0, 0.0)
        r%d2_7=makeFPE(1.0, 0.0)
        r%d3_7=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_7=makeFPE(0.0, 0.0)
        r%d2_7=makeFPE(0.0, 0.0)
        r%d3_7=makeFPE(0.0, 0.0)
      end if
      expDiff=b - 8
      if (expDiff > 1) then
        r%d1_8=0.0
        r%d2_8=0.0
        r%d3_8=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_8=makeFPE(1.0, 0.0)
        r%d2_8=makeFPE(1.0, 0.0)
        r%d3_8=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_8=makeFPE(0.0, 0.0)
        r%d2_8=makeFPE(0.0, 0.0)
        r%d3_8=makeFPE(0.0, 0.0)
      end if
      expDiff=b - 9
      if (expDiff > 1) then
        r%d1_9=0.0
        r%d2_9=0.0
        r%d3_9=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_9=makeFPE(1.0, 0.0)
        r%d2_9=makeFPE(1.0, 0.0)
        r%d3_9=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_9=makeFPE(0.0, 0.0)
        r%d2_9=makeFPE(0.0, 0.0)
        r%d3_9=makeFPE(0.0, 0.0)
      end if
      expDiff=b - 10
      if (expDiff > 1) then
        r%d1_10=0.0
        r%d2_10=0.0
        r%d3_10=0.0
      end if
      if (expDiff > 0 .and. expDiff < 1) then
        r%d1_10=makeFPE(1.0, 0.0)
        r%d2_10=makeFPE(1.0, 0.0)
        r%d3_10=makeFPE(1.0, 0.0)
      end if
      if (expDiff < 0) then
        r%d1_10=makeFPE(0.0, 0.0)
        r%d2_10=makeFPE(0.0, 0.0)
        r%d3_10=makeFPE(0.0, 0.0)
      end if
    else
      if (b == 1) then
        r%d1_1=a%d1_1
        r%d1_2=a%d1_2
        r%d1_3=a%d1_3
        r%d1_4=a%d1_4
        r%d1_5=a%d1_5
        r%d1_6=a%d1_6
        r%d1_7=a%d1_7
        r%d1_8=a%d1_8
        r%d1_9=a%d1_9
        r%d1_10=a%d1_10
        r%d2_1=a%d2_1
        r%d2_2=a%d2_2
        r%d2_3=a%d2_3
        r%d2_4=a%d2_4
        r%d2_5=a%d2_5
        r%d2_6=a%d2_6
        r%d2_7=a%d2_7
        r%d2_8=a%d2_8
        r%d2_9=a%d2_9
        r%d2_10=a%d2_10
        r%d3_1=a%d3_1
        r%d3_2=a%d3_2
        r%d3_3=a%d3_3
        r%d3_4=a%d3_4
        r%d3_5=a%d3_5
        r%d3_6=a%d3_6
        r%d3_7=a%d3_7
        r%d3_8=a%d3_8
        r%d3_9=a%d3_9
        r%d3_10=a%d3_10
      else
        r%d1_1=0.0
        r%d1_2=a%d1_1 * a%d1_1
        r%d1_3=a%d1_1 * a%d1_2 + a%d1_2 * a%d1_1
        r%d1_4=a%d1_1 * a%d1_3 + a%d1_2 * a%d1_2 + a%d1_3 * a%d1_1
        r%d1_5=a%d1_1 * a%d1_4 + a%d1_2 * a%d1_3 + a%d1_3 * a%d1_2 + a%d1_4 * a%d1_1
        r%d1_6=a%d1_1 * a%d1_5 + a%d1_2 * a%d1_4 + a%d1_3 * a%d1_3 + a%d1_4 * a%d1_2 + a%d1_5 * a%d1_1
        r%d1_7=a%d1_1 * a%d1_6 + a%d1_2 * a%d1_5 + a%d1_3 * a%d1_4 + a%d1_4 * a%d1_3 + a%d1_5 * a%d1_2 + a%d1_6 * a%d1_1
        r%d1_8=a%d1_1 * a%d1_7 + a%d1_2 * a%d1_6 + a%d1_3 * a%d1_5 + a%d1_4 * a%d1_4 + a%d1_5 * a%d1_3 + a%d1_6 * a%d1_2 + a%d1_7 &
* a%d1_1
        r%d1_9=a%d1_1 * a%d1_8 + a%d1_2 * a%d1_7 + a%d1_3 * a%d1_6 + a%d1_4 * a%d1_5 + a%d1_5 * a%d1_4 + a%d1_6 * a%d1_3 + a%d1_7 &
* a%d1_2 + a%d1_8 * a%d1_1
        r%d1_10=a%d1_1 * a%d1_9 + a%d1_2 * a%d1_8 + a%d1_3 * a%d1_7 + a%d1_4 * a%d1_6 + a%d1_5 * a%d1_5 + a%d1_6 * a%d1_4 + a%d1_7&
 * a%d1_3 + a%d1_8 * a%d1_2 + a%d1_9 * a%d1_1
        r%d2_1=0.0
        r%d2_2=a%d2_1 * a%d2_1
        r%d2_3=a%d2_1 * a%d2_2 + a%d2_2 * a%d2_1
        r%d2_4=a%d2_1 * a%d2_3 + a%d2_2 * a%d2_2 + a%d2_3 * a%d2_1
        r%d2_5=a%d2_1 * a%d2_4 + a%d2_2 * a%d2_3 + a%d2_3 * a%d2_2 + a%d2_4 * a%d2_1
        r%d2_6=a%d2_1 * a%d2_5 + a%d2_2 * a%d2_4 + a%d2_3 * a%d2_3 + a%d2_4 * a%d2_2 + a%d2_5 * a%d2_1
        r%d2_7=a%d2_1 * a%d2_6 + a%d2_2 * a%d2_5 + a%d2_3 * a%d2_4 + a%d2_4 * a%d2_3 + a%d2_5 * a%d2_2 + a%d2_6 * a%d2_1
        r%d2_8=a%d2_1 * a%d2_7 + a%d2_2 * a%d2_6 + a%d2_3 * a%d2_5 + a%d2_4 * a%d2_4 + a%d2_5 * a%d2_3 + a%d2_6 * a%d2_2 + a%d2_7 &
* a%d2_1
        r%d2_9=a%d2_1 * a%d2_8 + a%d2_2 * a%d2_7 + a%d2_3 * a%d2_6 + a%d2_4 * a%d2_5 + a%d2_5 * a%d2_4 + a%d2_6 * a%d2_3 + a%d2_7 &
* a%d2_2 + a%d2_8 * a%d2_1
        r%d2_10=a%d2_1 * a%d2_9 + a%d2_2 * a%d2_8 + a%d2_3 * a%d2_7 + a%d2_4 * a%d2_6 + a%d2_5 * a%d2_5 + a%d2_6 * a%d2_4 + a%d2_7&
 * a%d2_3 + a%d2_8 * a%d2_2 + a%d2_9 * a%d2_1
        r%d3_1=0.0
        r%d3_2=a%d3_1 * a%d3_1
        r%d3_3=a%d3_1 * a%d3_2 + a%d3_2 * a%d3_1
        r%d3_4=a%d3_1 * a%d3_3 + a%d3_2 * a%d3_2 + a%d3_3 * a%d3_1
        r%d3_5=a%d3_1 * a%d3_4 + a%d3_2 * a%d3_3 + a%d3_3 * a%d3_2 + a%d3_4 * a%d3_1
        r%d3_6=a%d3_1 * a%d3_5 + a%d3_2 * a%d3_4 + a%d3_3 * a%d3_3 + a%d3_4 * a%d3_2 + a%d3_5 * a%d3_1
        r%d3_7=a%d3_1 * a%d3_6 + a%d3_2 * a%d3_5 + a%d3_3 * a%d3_4 + a%d3_4 * a%d3_3 + a%d3_5 * a%d3_2 + a%d3_6 * a%d3_1
        r%d3_8=a%d3_1 * a%d3_7 + a%d3_2 * a%d3_6 + a%d3_3 * a%d3_5 + a%d3_4 * a%d3_4 + a%d3_5 * a%d3_3 + a%d3_6 * a%d3_2 + a%d3_7 &
* a%d3_1
        r%d3_9=a%d3_1 * a%d3_8 + a%d3_2 * a%d3_7 + a%d3_3 * a%d3_6 + a%d3_4 * a%d3_5 + a%d3_5 * a%d3_4 + a%d3_6 * a%d3_3 + a%d3_7 &
* a%d3_2 + a%d3_8 * a%d3_1
        r%d3_10=a%d3_1 * a%d3_9 + a%d3_2 * a%d3_8 + a%d3_3 * a%d3_7 + a%d3_4 * a%d3_6 + a%d3_5 * a%d3_5 + a%d3_6 * a%d3_4 + a%d3_7&
 * a%d3_3 + a%d3_8 * a%d3_2 + a%d3_9 * a%d3_1
        do j=3, int(real(b)), 1
          r%d1_10=r%v * a%d1_9 + r%d1_1 * a%d1_8 + r%d1_2 * a%d1_7 + r%d1_3 * a%d1_6 + r%d1_4 * a%d1_5 + r%d1_5 * a%d1_4 + r%d1_6 &
* a%d1_3 + r%d1_7 * a%d1_2 + r%d1_8 * a%d1_1 + r%d1_9 * a%v
          r%d2_10=r%v * a%d2_9 + r%d2_1 * a%d2_8 + r%d2_2 * a%d2_7 + r%d2_3 * a%d2_6 + r%d2_4 * a%d2_5 + r%d2_5 * a%d2_4 + r%d2_6 &
* a%d2_3 + r%d2_7 * a%d2_2 + r%d2_8 * a%d2_1 + r%d2_9 * a%v
          r%d3_10=r%v * a%d3_9 + r%d3_1 * a%d3_8 + r%d3_2 * a%d3_7 + r%d3_3 * a%d3_6 + r%d3_4 * a%d3_5 + r%d3_5 * a%d3_4 + r%d3_6 &
* a%d3_3 + r%d3_7 * a%d3_2 + r%d3_8 * a%d3_1 + r%d3_9 * a%v
          r%d1_9=r%v * a%d1_8 + r%d1_1 * a%d1_7 + r%d1_2 * a%d1_6 + r%d1_3 * a%d1_5 + r%d1_4 * a%d1_4 + r%d1_5 * a%d1_3 + r%d1_6 * &
a%d1_2 + r%d1_7 * a%d1_1 + r%d1_8 * a%v
          r%d2_9=r%v * a%d2_8 + r%d2_1 * a%d2_7 + r%d2_2 * a%d2_6 + r%d2_3 * a%d2_5 + r%d2_4 * a%d2_4 + r%d2_5 * a%d2_3 + r%d2_6 * &
a%d2_2 + r%d2_7 * a%d2_1 + r%d2_8 * a%v
          r%d3_9=r%v * a%d3_8 + r%d3_1 * a%d3_7 + r%d3_2 * a%d3_6 + r%d3_3 * a%d3_5 + r%d3_4 * a%d3_4 + r%d3_5 * a%d3_3 + r%d3_6 * &
a%d3_2 + r%d3_7 * a%d3_1 + r%d3_8 * a%v
          r%d1_8=r%v * a%d1_7 + r%d1_1 * a%d1_6 + r%d1_2 * a%d1_5 + r%d1_3 * a%d1_4 + r%d1_4 * a%d1_3 + r%d1_5 * a%d1_2 + r%d1_6 * &
a%d1_1 + r%d1_7 * a%v
          r%d2_8=r%v * a%d2_7 + r%d2_1 * a%d2_6 + r%d2_2 * a%d2_5 + r%d2_3 * a%d2_4 + r%d2_4 * a%d2_3 + r%d2_5 * a%d2_2 + r%d2_6 * &
a%d2_1 + r%d2_7 * a%v
          r%d3_8=r%v * a%d3_7 + r%d3_1 * a%d3_6 + r%d3_2 * a%d3_5 + r%d3_3 * a%d3_4 + r%d3_4 * a%d3_3 + r%d3_5 * a%d3_2 + r%d3_6 * &
a%d3_1 + r%d3_7 * a%v
          r%d1_7=r%v * a%d1_6 + r%d1_1 * a%d1_5 + r%d1_2 * a%d1_4 + r%d1_3 * a%d1_3 + r%d1_4 * a%d1_2 + r%d1_5 * a%d1_1 + r%d1_6 * &
a%v
          r%d2_7=r%v * a%d2_6 + r%d2_1 * a%d2_5 + r%d2_2 * a%d2_4 + r%d2_3 * a%d2_3 + r%d2_4 * a%d2_2 + r%d2_5 * a%d2_1 + r%d2_6 * &
a%v
          r%d3_7=r%v * a%d3_6 + r%d3_1 * a%d3_5 + r%d3_2 * a%d3_4 + r%d3_3 * a%d3_3 + r%d3_4 * a%d3_2 + r%d3_5 * a%d3_1 + r%d3_6 * &
a%v
          r%d1_6=r%v * a%d1_5 + r%d1_1 * a%d1_4 + r%d1_2 * a%d1_3 + r%d1_3 * a%d1_2 + r%d1_4 * a%d1_1 + r%d1_5 * a%v
          r%d2_6=r%v * a%d2_5 + r%d2_1 * a%d2_4 + r%d2_2 * a%d2_3 + r%d2_3 * a%d2_2 + r%d2_4 * a%d2_1 + r%d2_5 * a%v
          r%d3_6=r%v * a%d3_5 + r%d3_1 * a%d3_4 + r%d3_2 * a%d3_3 + r%d3_3 * a%d3_2 + r%d3_4 * a%d3_1 + r%d3_5 * a%v
          r%d1_5=r%v * a%d1_4 + r%d1_1 * a%d1_3 + r%d1_2 * a%d1_2 + r%d1_3 * a%d1_1 + r%d1_4 * a%v
          r%d2_5=r%v * a%d2_4 + r%d2_1 * a%d2_3 + r%d2_2 * a%d2_2 + r%d2_3 * a%d2_1 + r%d2_4 * a%v
          r%d3_5=r%v * a%d3_4 + r%d3_1 * a%d3_3 + r%d3_2 * a%d3_2 + r%d3_3 * a%d3_1 + r%d3_4 * a%v
          r%d1_4=r%v * a%d1_3 + r%d1_1 * a%d1_2 + r%d1_2 * a%d1_1 + r%d1_3 * a%v
          r%d2_4=r%v * a%d2_3 + r%d2_1 * a%d2_2 + r%d2_2 * a%d2_1 + r%d2_3 * a%v
          r%d3_4=r%v * a%d3_3 + r%d3_1 * a%d3_2 + r%d3_2 * a%d3_1 + r%d3_3 * a%v
          r%d1_3=r%v * a%d1_2 + r%d1_1 * a%d1_1 + r%d1_2 * a%v
          r%d2_3=r%v * a%d2_2 + r%d2_1 * a%d2_1 + r%d2_2 * a%v
          r%d3_3=r%v * a%d3_2 + r%d3_1 * a%d3_1 + r%d3_2 * a%v
          r%d1_2=r%v * a%d1_1 + r%d1_1 * a%v
          r%d2_2=r%v * a%d2_1 + r%d2_1 * a%v
          r%d3_2=r%v * a%d3_1 + r%d3_1 * a%v
          r%d1_1=r%v * a%v
          r%d2_1=r%v * a%v
          r%d3_1=r%v * a%v
        end do
      end if
    end if
  end if
else
  recip=1.0 / a%v
  s%d1_1=1 * a%d1_1
  t%d1_1=recip * (b * (r%v * s%d1_1) - (0.0))
  r%d1_1=t%d1_1 / 1
  s%d1_2=2 * a%d1_2
  t%d1_2=recip * (b * (r%v * s%d1_2 + r%d1_1 * s%d1_1) - (a%d1_1 * t%d1_1))
  r%d1_2=t%d1_2 / 2
  s%d1_3=3 * a%d1_3
  t%d1_3=recip * (b * (r%v * s%d1_3 + r%d1_1 * s%d1_2 + r%d1_2 * s%d1_1) - (a%d1_1 * t%d1_2 + a%d1_2 * t%d1_1))
  r%d1_3=t%d1_3 / 3
  s%d1_4=4 * a%d1_4
  t%d1_4=recip * (b * (r%v * s%d1_4 + r%d1_1 * s%d1_3 + r%d1_2 * s%d1_2 + r%d1_3 * s%d1_1) - (a%d1_1 * t%d1_3 + a%d1_2 * t%d1_2 + a&
&%d1_3 * t%d1_1))
  r%d1_4=t%d1_4 / 4
  s%d1_5=5 * a%d1_5
  t%d1_5=recip * (b * (r%v * s%d1_5 + r%d1_1 * s%d1_4 + r%d1_2 * s%d1_3 + r%d1_3 * s%d1_2 + r%d1_4 * s%d1_1) - (a%d1_1 * t%d1_4 + a&
&%d1_2 * t%d1_3 + a%d1_3 * t%d1_2 + a%d1_4 * t%d1_1))
  r%d1_5=t%d1_5 / 5
  s%d1_6=6 * a%d1_6
  t%d1_6=recip * (b * (r%v * s%d1_6 + r%d1_1 * s%d1_5 + r%d1_2 * s%d1_4 + r%d1_3 * s%d1_3 + r%d1_4 * s%d1_2 + r%d1_5 * s%d1_1) - (a&
&%d1_1 * t%d1_5 + a%d1_2 * t%d1_4 + a%d1_3 * t%d1_3 + a%d1_4 * t%d1_2 + a%d1_5 * t%d1_1))
  r%d1_6=t%d1_6 / 6
  s%d1_7=7 * a%d1_7
  t%d1_7=recip * (b * (r%v * s%d1_7 + r%d1_1 * s%d1_6 + r%d1_2 * s%d1_5 + r%d1_3 * s%d1_4 + r%d1_4 * s%d1_3 + r%d1_5 * s%d1_2 + r%&
&d1_6 * s%d1_1) - (a%d1_1 * t%d1_6 + a%d1_2 * t%d1_5 + a%d1_3 * t%d1_4 + a%d1_4 * t%d1_3 + a%d1_5 * t%d1_2 + a%d1_6 * t%d1_1))
  r%d1_7=t%d1_7 / 7
  s%d1_8=8 * a%d1_8
  t%d1_8=recip * (b * (r%v * s%d1_8 + r%d1_1 * s%d1_7 + r%d1_2 * s%d1_6 + r%d1_3 * s%d1_5 + r%d1_4 * s%d1_4 + r%d1_5 * s%d1_3 + r%&
&d1_6 * s%d1_2 + r%d1_7 * s%d1_1) - (a%d1_1 * t%d1_7 + a%d1_2 * t%d1_6 + a%d1_3 * t%d1_5 + a%d1_4 * t%d1_4 + a%d1_5 * t%d1_3 + a%d&
&1_6 * t%d1_2 + a%d1_7 * t%d1_1))
  r%d1_8=t%d1_8 / 8
  s%d1_9=9 * a%d1_9
  t%d1_9=recip * (b * (r%v * s%d1_9 + r%d1_1 * s%d1_8 + r%d1_2 * s%d1_7 + r%d1_3 * s%d1_6 + r%d1_4 * s%d1_5 + r%d1_5 * s%d1_4 + r%&
&d1_6 * s%d1_3 + r%d1_7 * s%d1_2 + r%d1_8 * s%d1_1) - (a%d1_1 * t%d1_8 + a%d1_2 * t%d1_7 + a%d1_3 * t%d1_6 + a%d1_4 * t%d1_5 + a%d&
&1_5 * t%d1_4 + a%d1_6 * t%d1_3 + a%d1_7 * t%d1_2 + a%d1_8 * t%d1_1))
  r%d1_9=t%d1_9 / 9
  s%d1_10=10 * a%d1_10
  t%d1_10=recip * (b * (r%v * s%d1_10 + r%d1_1 * s%d1_9 + r%d1_2 * s%d1_8 + r%d1_3 * s%d1_7 + r%d1_4 * s%d1_6 + r%d1_5 * s%d1_5 + r&
&%d1_6 * s%d1_4 + r%d1_7 * s%d1_3 + r%d1_8 * s%d1_2 + r%d1_9 * s%d1_1) - (a%d1_1 * t%d1_9 + a%d1_2 * t%d1_8 + a%d1_3 * t%d1_7 + a%&
&d1_4 * t%d1_6 + a%d1_5 * t%d1_5 + a%d1_6 * t%d1_4 + a%d1_7 * t%d1_3 + a%d1_8 * t%d1_2 + a%d1_9 * t%d1_1))
  r%d1_10=t%d1_10 / 10
  s%d2_1=1 * a%d2_1
  t%d2_1=recip * (b * (r%v * s%d2_1) - (0.0))
  r%d2_1=t%d2_1 / 1
  s%d2_2=2 * a%d2_2
  t%d2_2=recip * (b * (r%v * s%d2_2 + r%d2_1 * s%d2_1) - (a%d2_1 * t%d2_1))
  r%d2_2=t%d2_2 / 2
  s%d2_3=3 * a%d2_3
  t%d2_3=recip * (b * (r%v * s%d2_3 + r%d2_1 * s%d2_2 + r%d2_2 * s%d2_1) - (a%d2_1 * t%d2_2 + a%d2_2 * t%d2_1))
  r%d2_3=t%d2_3 / 3
  s%d2_4=4 * a%d2_4
  t%d2_4=recip * (b * (r%v * s%d2_4 + r%d2_1 * s%d2_3 + r%d2_2 * s%d2_2 + r%d2_3 * s%d2_1) - (a%d2_1 * t%d2_3 + a%d2_2 * t%d2_2 + a&
&%d2_3 * t%d2_1))
  r%d2_4=t%d2_4 / 4
  s%d2_5=5 * a%d2_5
  t%d2_5=recip * (b * (r%v * s%d2_5 + r%d2_1 * s%d2_4 + r%d2_2 * s%d2_3 + r%d2_3 * s%d2_2 + r%d2_4 * s%d2_1) - (a%d2_1 * t%d2_4 + a&
&%d2_2 * t%d2_3 + a%d2_3 * t%d2_2 + a%d2_4 * t%d2_1))
  r%d2_5=t%d2_5 / 5
  s%d2_6=6 * a%d2_6
  t%d2_6=recip * (b * (r%v * s%d2_6 + r%d2_1 * s%d2_5 + r%d2_2 * s%d2_4 + r%d2_3 * s%d2_3 + r%d2_4 * s%d2_2 + r%d2_5 * s%d2_1) - (a&
&%d2_1 * t%d2_5 + a%d2_2 * t%d2_4 + a%d2_3 * t%d2_3 + a%d2_4 * t%d2_2 + a%d2_5 * t%d2_1))
  r%d2_6=t%d2_6 / 6
  s%d2_7=7 * a%d2_7
  t%d2_7=recip * (b * (r%v * s%d2_7 + r%d2_1 * s%d2_6 + r%d2_2 * s%d2_5 + r%d2_3 * s%d2_4 + r%d2_4 * s%d2_3 + r%d2_5 * s%d2_2 + r%&
&d2_6 * s%d2_1) - (a%d2_1 * t%d2_6 + a%d2_2 * t%d2_5 + a%d2_3 * t%d2_4 + a%d2_4 * t%d2_3 + a%d2_5 * t%d2_2 + a%d2_6 * t%d2_1))
  r%d2_7=t%d2_7 / 7
  s%d2_8=8 * a%d2_8
  t%d2_8=recip * (b * (r%v * s%d2_8 + r%d2_1 * s%d2_7 + r%d2_2 * s%d2_6 + r%d2_3 * s%d2_5 + r%d2_4 * s%d2_4 + r%d2_5 * s%d2_3 + r%&
&d2_6 * s%d2_2 + r%d2_7 * s%d2_1) - (a%d2_1 * t%d2_7 + a%d2_2 * t%d2_6 + a%d2_3 * t%d2_5 + a%d2_4 * t%d2_4 + a%d2_5 * t%d2_3 + a%d&
&2_6 * t%d2_2 + a%d2_7 * t%d2_1))
  r%d2_8=t%d2_8 / 8
  s%d2_9=9 * a%d2_9
  t%d2_9=recip * (b * (r%v * s%d2_9 + r%d2_1 * s%d2_8 + r%d2_2 * s%d2_7 + r%d2_3 * s%d2_6 + r%d2_4 * s%d2_5 + r%d2_5 * s%d2_4 + r%&
&d2_6 * s%d2_3 + r%d2_7 * s%d2_2 + r%d2_8 * s%d2_1) - (a%d2_1 * t%d2_8 + a%d2_2 * t%d2_7 + a%d2_3 * t%d2_6 + a%d2_4 * t%d2_5 + a%d&
&2_5 * t%d2_4 + a%d2_6 * t%d2_3 + a%d2_7 * t%d2_2 + a%d2_8 * t%d2_1))
  r%d2_9=t%d2_9 / 9
  s%d2_10=10 * a%d2_10
  t%d2_10=recip * (b * (r%v * s%d2_10 + r%d2_1 * s%d2_9 + r%d2_2 * s%d2_8 + r%d2_3 * s%d2_7 + r%d2_4 * s%d2_6 + r%d2_5 * s%d2_5 + r&
&%d2_6 * s%d2_4 + r%d2_7 * s%d2_3 + r%d2_8 * s%d2_2 + r%d2_9 * s%d2_1) - (a%d2_1 * t%d2_9 + a%d2_2 * t%d2_8 + a%d2_3 * t%d2_7 + a%&
&d2_4 * t%d2_6 + a%d2_5 * t%d2_5 + a%d2_6 * t%d2_4 + a%d2_7 * t%d2_3 + a%d2_8 * t%d2_2 + a%d2_9 * t%d2_1))
  r%d2_10=t%d2_10 / 10
  s%d3_1=1 * a%d3_1
  t%d3_1=recip * (b * (r%v * s%d3_1) - (0.0))
  r%d3_1=t%d3_1 / 1
  s%d3_2=2 * a%d3_2
  t%d3_2=recip * (b * (r%v * s%d3_2 + r%d3_1 * s%d3_1) - (a%d3_1 * t%d3_1))
  r%d3_2=t%d3_2 / 2
  s%d3_3=3 * a%d3_3
  t%d3_3=recip * (b * (r%v * s%d3_3 + r%d3_1 * s%d3_2 + r%d3_2 * s%d3_1) - (a%d3_1 * t%d3_2 + a%d3_2 * t%d3_1))
  r%d3_3=t%d3_3 / 3
  s%d3_4=4 * a%d3_4
  t%d3_4=recip * (b * (r%v * s%d3_4 + r%d3_1 * s%d3_3 + r%d3_2 * s%d3_2 + r%d3_3 * s%d3_1) - (a%d3_1 * t%d3_3 + a%d3_2 * t%d3_2 + a&
&%d3_3 * t%d3_1))
  r%d3_4=t%d3_4 / 4
  s%d3_5=5 * a%d3_5
  t%d3_5=recip * (b * (r%v * s%d3_5 + r%d3_1 * s%d3_4 + r%d3_2 * s%d3_3 + r%d3_3 * s%d3_2 + r%d3_4 * s%d3_1) - (a%d3_1 * t%d3_4 + a&
&%d3_2 * t%d3_3 + a%d3_3 * t%d3_2 + a%d3_4 * t%d3_1))
  r%d3_5=t%d3_5 / 5
  s%d3_6=6 * a%d3_6
  t%d3_6=recip * (b * (r%v * s%d3_6 + r%d3_1 * s%d3_5 + r%d3_2 * s%d3_4 + r%d3_3 * s%d3_3 + r%d3_4 * s%d3_2 + r%d3_5 * s%d3_1) - (a&
&%d3_1 * t%d3_5 + a%d3_2 * t%d3_4 + a%d3_3 * t%d3_3 + a%d3_4 * t%d3_2 + a%d3_5 * t%d3_1))
  r%d3_6=t%d3_6 / 6
  s%d3_7=7 * a%d3_7
  t%d3_7=recip * (b * (r%v * s%d3_7 + r%d3_1 * s%d3_6 + r%d3_2 * s%d3_5 + r%d3_3 * s%d3_4 + r%d3_4 * s%d3_3 + r%d3_5 * s%d3_2 + r%&
&d3_6 * s%d3_1) - (a%d3_1 * t%d3_6 + a%d3_2 * t%d3_5 + a%d3_3 * t%d3_4 + a%d3_4 * t%d3_3 + a%d3_5 * t%d3_2 + a%d3_6 * t%d3_1))
  r%d3_7=t%d3_7 / 7
  s%d3_8=8 * a%d3_8
  t%d3_8=recip * (b * (r%v * s%d3_8 + r%d3_1 * s%d3_7 + r%d3_2 * s%d3_6 + r%d3_3 * s%d3_5 + r%d3_4 * s%d3_4 + r%d3_5 * s%d3_3 + r%&
&d3_6 * s%d3_2 + r%d3_7 * s%d3_1) - (a%d3_1 * t%d3_7 + a%d3_2 * t%d3_6 + a%d3_3 * t%d3_5 + a%d3_4 * t%d3_4 + a%d3_5 * t%d3_3 + a%d&
&3_6 * t%d3_2 + a%d3_7 * t%d3_1))
  r%d3_8=t%d3_8 / 8
  s%d3_9=9 * a%d3_9
  t%d3_9=recip * (b * (r%v * s%d3_9 + r%d3_1 * s%d3_8 + r%d3_2 * s%d3_7 + r%d3_3 * s%d3_6 + r%d3_4 * s%d3_5 + r%d3_5 * s%d3_4 + r%&
&d3_6 * s%d3_3 + r%d3_7 * s%d3_2 + r%d3_8 * s%d3_1) - (a%d3_1 * t%d3_8 + a%d3_2 * t%d3_7 + a%d3_3 * t%d3_6 + a%d3_4 * t%d3_5 + a%d&
&3_5 * t%d3_4 + a%d3_6 * t%d3_3 + a%d3_7 * t%d3_2 + a%d3_8 * t%d3_1))
  r%d3_9=t%d3_9 / 9
  s%d3_10=10 * a%d3_10
  t%d3_10=recip * (b * (r%v * s%d3_10 + r%d3_1 * s%d3_9 + r%d3_2 * s%d3_8 + r%d3_3 * s%d3_7 + r%d3_4 * s%d3_6 + r%d3_5 * s%d3_5 + r&
&%d3_6 * s%d3_4 + r%d3_7 * s%d3_3 + r%d3_8 * s%d3_2 + r%d3_9 * s%d3_1) - (a%d3_1 * t%d3_9 + a%d3_2 * t%d3_8 + a%d3_3 * t%d3_7 + a%&
&d3_4 * t%d3_6 + a%d3_5 * t%d3_5 + a%d3_6 * t%d3_4 + a%d3_7 * t%d3_3 + a%d3_8 * t%d3_2 + a%d3_9 * t%d3_1))
  r%d3_10=t%d3_10 / 10
end if
