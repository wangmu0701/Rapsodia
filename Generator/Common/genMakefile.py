##########################################################
# This file is part of Rapsodia released under the LGPL. #
# The full COPYRIGHT notice can be found in the top      #
# level directory of the Rapsodia distribution           #
##########################################################

import os
import shutil
import filecmp
import Common.ast as ast
import Common.names as names
import Common.parameters as params
import Common.util as util

def depsToRules(printer):
    # remove duplicates:
    deps=list(set(printer.getGenDeps()))
    # construct the rules dict with the source file name as target, we will change when we are done
    rules=dict(map(lambda l: (l+printer.sE,set([l+printer.sE])),printer.getObjNames()))
    changed=True
    while changed:
        changed=False
        for dep in deps:
            for t,p in rules.items():
                if (dep[0]==t and (dep[1] not in p)): 
                    p.add(dep[1])
                    changed=True
                if ((dep[0] in p) and (dep[1] not in p)):
                    p.add(dep[1])
                    changed=True
    return list(map(lambda l: l[0][0:-len(printer.sE)]+'.o : '+' '.join(l[1]),rules.items()))
    

def genMakefile(printer):
    fName=printer.oP + '/Makefile'
    fTempName=fName+'.tmp'
    f = open(fTempName, 'w')
    f.write("######################################################################\n")
    f.write("# This file was generated by Rapsodia (see www.mcs.anl.gov/Rapsodia) #\n")
    f.write("######################################################################\n\n\n")
    path=os.path.join(os.path.dirname(os.path.abspath(__file__)),"..","..")                 
    shutil.copyfileobj(open(os.path.join(path,"MakeDefs.mk"),"r"),f)
    shutil.copyfileobj(open(os.path.join(path,"MakeRules.mk"),"r"),f)
    f.write('''

RA_GEN_NAMES= \\\n%s

''' % (' \\\n'.join(printer.getObjNames())))
    if (printer.inlineDefs):
        f.write('''
OBJS=
''')
    else: 
        f.write('''
OBJS=$(addsuffix .o, $(RA_GEN_NAMES))
''')
    if params.useQueue:
        f.write("OBJS+=$(QUEUEOBJS)\n")
    f.write("default: libRapsodia.a\n") 
    f.write("libRapsodia.a:") 
    if params.useQueue:
        f.write(" $(QUEUEFILES)")
    f.write(''' $(OBJS)
	ar rcs libRapsodia.a $?

''')
    if params.useQueue:
        f.write('''
$(QUEUEFILES):
	cp ''')
        f.write(path+"/queue/$@ ./\n\n")
    f.write('''
clean:
	rm -f *.o *.a
''')
    if params.useQueue:
        f.write('''\trm -f $(QUEUEFILES)
''')
    f.write('''

.PHONY: default clean

# dependencies

''')
    deps=[]
    for r in depsToRules(printer):
        f.write(r+"\n")
    f.close()
    if ((os.path.exists(fName)
         and
         not(filecmp.cmp(fTempName,fName)))
        or
        not(os.path.exists(fName))):
      os.rename(fTempName,fName)
    else:
      os.remove(fTempName)

def genMakefileReverse(printer):
    fName=printer.oP + '/Makefile'
    fTempName=fName+'.tmp'
    f = open(fTempName, 'w')
    f.write("######################################################################\n")
    f.write("# This file was generated by Rapsodia (see www.mcs.anl.gov/Rapsodia) #\n")
    f.write("######################################################################\n\n\n")
    path=os.path.join(os.path.dirname(os.path.abspath(__file__)),"..","..")                 
    shutil.copyfileobj(open(os.path.join(path,"MakeDefs.mk"),"r"),f)
    shutil.copyfileobj(open(os.path.join(path,"MakeRules.mk"),"r"),f)
    revLibs='\\\nblock\\\ntrace\\\nreverse\\\nlocation\n'
    f.write('''

RA_GEN_NAMES= \\\n%s

OBJS=$(addsuffix .o, $(RA_GEN_NAMES))
''' % (' \\\n'.join(printer.getObjNames())+revLibs))
    f.write("default: libRapsodia.a\n") 
    f.write("libRapsodia.a:") 
    f.write(''' $(OBJS)
	ar rcs libRapsodia.a $?

''')
    f.write('''
clean:
	rm -f *.o *.a
''')
    f.write('''

.PHONY: default clean

# dependencies

''')
    full_path = os.path.dirname(os.path.realpath(__file__))
    deps=[]
    traces=['block','trace','reverse','location']
    for r in depsToRules(printer):
        f.write(r+"\n")
    for r in traces:
        f.write(r+'.o : '+r+'.cpp\n')
    f.close()
    if ((os.path.exists(fName)
         and
         not(filecmp.cmp(fTempName,fName)))
        or
        not(os.path.exists(fName))):
      os.rename(fTempName,fName)
    else:
      os.remove(fTempName)

    dest=printer.oP
    src=full_path+'/../../Reverse/'
    src_files = os.listdir(src)
    for file_name in src_files:
      full_file_name = os.path.join(src, file_name)
      if (os.path.isfile(full_file_name)):
        shutil.copy(full_file_name, dest)


